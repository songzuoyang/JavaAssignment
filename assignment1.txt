Scenario : Pay tuition 
Description : A student wants to pay his tuition through myNEU account. 
Objects (with Behaviors and State):
        Objects : Student
                 State : name, username, password
                 Behavior : visitSchoolWebsite(), payMoney(),

        Objects : SchoolWebsite
                 State :  displayOfTuition
                 Behavior : showTuition(), acceptMoney()

        Objects : Tuition
                 State : detail

        Objects : Money
                 State : amount 

class Student{
        String name;
        void visitSchoolWebsite(SchoolWebsite NEUWebsite) {}
        money payMoney(SchoolWebsite neuweb) 

}

class SchoolWebsite{
        void showTuition(detail) {}
        void acceptMoney(Money money) {}

}

class Tuition{
        String detail;

}

class Money{
        float amount

}

class payTuitionOnLine {
        public static void main(String args[]){

        Student michael = new Student();
        michael.name = "Michael";
        
        Tuition tuition = new Tuition();
        
        SchoolWebsite NEUWebsite = new SchoolWebsite();

        michael.visitSchoolWebsite(NEUWebsite);
        tuition.detail = SchoolWebsite.showTuition(username, password);
        Money money = michael.payMoney(NEUWebsite);
        NEUWebsite.acceptMoney(money);
         
        }
}

Scenario : Order for delivery 
Description : A consumer is going to order a delivery through phone calls. 
Objects (with Behaviors and State):
        Objects : Consumer
                 State : name, address
                 Behavior : makePhoneCall(), orderForGoods(), payMoney(),

        Objects : DeliveryCompany
                 State :  phonenumber
                 Behavior : deliverTheGoods(); acceptMoney()

        Objects : Goods
                 State : name 

        Objects : Money
                 State : amount 

class Consumer{
        String name;
        String adress;
        void makePhoneCall(DeliveryCompany dc) {}
        void orderForGoods(Goods good) {}
        money payMoney(DeliveryCompany dc) 

}

class DeliveryCompany{
        Goods[] goods;
        void deliverTheGoods(Consumer c, Goods g) {}
        void acceptMoney(Money money) {}

}

class Goods{
        String name;

}

class Money{
        float amount

}

class orderForDelivery {
        public static void main(String args[]){

        Consumer michael = new Consumer();
        michael.name = "Michael";
                
        Goods good = new Goods();
        
        DeliveryCompany dc = new DeliveryCompany();
        dc.phonenumber = pn

        michael.makePhoneCall(dc.pn);
        michael.orderForGoods(good);
        dc.deliverTheGoods(michael, good);
        Money money = michael.payMoney(dc);
        dc.acceptMoney(money);
         
        }
}

 
Scenario : Booking an Airbnb 
Description : A tourist wants to book a house on Airbnb app. 
Objects (with Behaviors and State):
        Objects : Tourist
                 State : name, 
                 Behavior : loginmAirbnbapp(), findSuitabaleHouse(), payMoney()

        Objects : AirbnbApp
                 State :  displayOfHouses
                 Behavior : showHouses(), acceptMoney()

        Objects : House
                 State : detail

        Objects : Money
                 State : amount 

class Tourist{
        String name;
        void loginmAirbnbapp(AirbnbApp airbnb) {}
        void findSuitabaleHouse(House house) {}
        money payMoney(AirbnbApp airbnb) 

}

class AirbnbApp{
        void showHouses(House house) {}
        void acceptMoney(Money money) {}

}

class House{
        String detail;

}

class Money{
        float amount

}

class bookAirbnb {
        public static void main(String args[]){

        Tourist michael = new Tourist();
        michael.name = "Michael";
                
        House house = new House();
        
        AirbnbApp airbnb = new AirbnbApp();

        michael.loginmAirbnbapp(dc.pn);
        michael.findSuitabaleHouse(house);
        airbnb.shouHouses(house.detail);
        Money money = michael.payMoney(airbnb);
        airbnb.acceptMoney(money);
         
        }
}

Scenario : Travelling to LA 
Description : A tourist is trying to find the cheapest flight to LA. 
Objects (with Behaviors and State):
        Objects : Tourist
                 State : name, destination
                 Behavior : visitWebsite(), findFlightNumber(), payMoneytoWebsite()

        Objects : FlightTicketWebsite
                 State :  displayOfFlight
                 Behavior : showFlights(), acceptMoney()

        Objects : FlightInformation
                 State : FlightNumber, Price
                 
        Objects : Money
                 State : amount 

class Tourist{
        String name;
        void visitWebsite(FlightTicketWebsite) {}
        void findFlightNumber(FlightInformation) {}
        money payMoneytoWebsite(FlightTicketWebsite) 

}

class FlightTicketWebsite{
        void showFlights(FlyInformation flyinformation) {}
        void acceptMoney(Money money) {}

}

class FlightInformation{
        String FlightNumber;
        String Price;

}

class Money{
        float amount

}

class findFlight {
        public static void main(String args[]){

        Tourist michael = new Tourist();
        michael.name = "Michael";
        
        FlightTicketWebsite flyweb = new FlightTicketWebsite();

        michael.visitWebsite(FlightTicketWebsite flyweb);
        michael.findFlightNumber(michael.destination);
        flyweb.showFlights(FlightInformation);
        Money money = michael.payMoney(flyweb);
        flyweb.acceptMoney(money);
         
        }
}

 
 
Scenario : Drive home 
Description : A student is driving home from school. 
Objects (with Behaviors and State):
        Objects : Student
                 State : name, destination
                 Behavior : startTheEngine(), enterDestination(), driveTheCar()

        Objects : Car
                 Behavior : run()

        Objects : Gps
                 Behavior : showRoute()

class Student{
        String name;
        String destination;
        void startTheEngine() {}
        void enterDestination(destination) {}
        void driveTheCar(Car) {}

}

class Car{
        void run() 

}

class Gps{
        void showRoute(destination) {}

}

class drivehome {
        public static void main(String args[]){

        Student michael = new Student(); 
        Car tesla = new Car();
        Gps gps = new Gps();

        michael.startTheEngine();
        michael.enterDestination(destination);
        gps.showRoute(destination);
        michael.driveTheCar();
        Car.run();
                
        }
}
